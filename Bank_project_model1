{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import random "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model test 1\n",
    "\n",
    "**initial conditions** : $N = 100$ people in the bank, they put $m = 1$ in the bank\n",
    "\n",
    "**conditions of the bank** :  \n",
    "* if you stay you earn interest on the money you put in the bank. Each period the bank give you a rate $t<1$ of your money : you earn $ t \\times m $ \n",
    "* if you decide to go you take back your money plus you earn your interest $ t \\times m $\n",
    "\n",
    "**belief of each depositor** :\n",
    "They have to estimate if the bank will have sufficiently money to pay them in the next period. \n",
    "To do so they estimate:\n",
    "* the number of people that will leave in the present period :\n",
    "    - their belief is based on the previous rate of departure $f$ + a gaussian noise with mean 0 and variance $\\sigma$ \n",
    "* if the bank have sufficiently money to pay everyone and invest :\n",
    "    - they estimate what will pay the bank at the present period with their estimated f \n",
    "    - they estimate if the bank still have money\n",
    "    - if they think bank will not have enough money they will decide to leave\n",
    "    \n",
    "\n",
    "                         \n",
    "   \n",
    "                         \n",
    "                         "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "662 0.358 0.108 562.0\n",
      "439 0.425226586102719 0.17522658610271905 233.29999999999995\n",
      "168 0.8058086560364465 0.5558086560364465 -163.6300000000001\n",
      "-11 1.25 1.0 -492.0820000000001\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "negative dimensions are not allowed",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-44-75505a8bf81e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0;31m#estimation of the rate of leaving people\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m     \u001b[0mf_estimate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msigma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mN\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m     \u001b[0mf_estimate\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwhere\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m>\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mmtrand.pyx\u001b[0m in \u001b[0;36mnumpy.random.mtrand.RandomState.normal\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m_common.pyx\u001b[0m in \u001b[0;36mnumpy.random._common.cont\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: negative dimensions are not allowed"
     ]
    }
   ],
   "source": [
    "N = 1000 #number of people\n",
    "m = 1 #money people put in the bank\n",
    "bank = N*m #capital of the bank\n",
    "T = 1.4 #bank invest rate\n",
    "t = 0.5 #people earned rate \n",
    "sigma = 0.5 #noise variance\n",
    "gonne = 1/4 #people who need to leave\n",
    "mad = 0 #peolple who think it's better to leave\n",
    "f = gonne + mad #rate of  leaving initial \n",
    "\n",
    "\n",
    "for i in range(0,6):\n",
    "    \n",
    "    #new people entering the bank\n",
    "    new = int(random.uniform(0,100))\n",
    "    \n",
    "    #estimation of the rate of leaving people\n",
    "    f_estimate = abs(np.random.normal(f,sigma,size=N))\n",
    "    f_estimate[np.where(f>1)[0]]=1\n",
    "    \n",
    "    #creation of an array for the bank and an array interest that represent the interest the bank give to everyone\n",
    "    bank_array = np.ones(N)*bank\n",
    "    indexes = np.arange(len(bank_array))\n",
    "    interet = np.ones(N)*t*N*m\n",
    "    \n",
    "    #estimation of the bank by people wiht their estimation of the rate of leaving people\n",
    "    bank_estimate = T*bank_array - f_estimate*N*m - interet + np.ones(N)*new*m\n",
    "    \n",
    "    #calculation of the number of mad people\n",
    "    indexes_mad_people = np.where(bank_estimate<0)[0]\n",
    "    mad = len(indexes_mad_people)\n",
    "    mad = len(indexes_mad_people)/N\n",
    "    \n",
    "    f = gonne + mad\n",
    "    bank = T*bank - f*N*m - t*N*m + new*m\n",
    "    N = int(N - f*N + new)\n",
    "    \n",
    "    print(N,f,mad,bank)\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "    \n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
